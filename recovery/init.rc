on early-init
    start ueventd

on init
    export PATH /sbin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard
    export LD_LIBRARY_PATH .:/sbin

    symlink /system/etc /etc

    mkdir /boot
    mkdir /sdcard
    mkdir /sd-ext
    mkdir /datadata
    mkdir /emmc
    mkdir /system
    mkdir /data
    mkdir /cache
    mount /tmp /tmp tmpfs

    chown root shell /tmp
    chmod 0775 /tmp

    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 0fce
    write /sys/class/android_usb/android0/idProduct 6146
    write /sys/class/android_usb/android0/functions mass_storage,adb
    write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
    write /sys/class/android_usb/android0/iProduct ${ro.product.model}
    write /sys/class/android_usb/android0/iSerial ${ro.serialno}

on boot
    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

on post-fs
    mount vfat /dev/block/mmcblk0p16 /sdcard

    wait /dev/block/mmcblk0p2
    start tad
    exec /sbin/wait4tad

    start rmt_storage
    start ta_rmt_service

service tad /sbin/tad /dev/block/mmcblk0p2 0,16,256
    class trimarea
    user root
    group root
    socket tad stream 0660 system system

service rmt_storage /sbin/rmt_storage
    class core
    user root
    disabled

service ta_rmt_service /sbin/ta_rmt_service
    class late_start
    user root
    disabled

service ueventd /sbin/ueventd
    critical

service recovery /sbin/recovery

service adbd /sbin/adbd recovery
    disabled

# Always start adbd on userdebug and eng builds
on property:ro.debuggable=1
    #write /sys/class/android_usb/android0/enable 1
    #start adbd
    setprop service.adb.root 1

# Restart adbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    restart adbd
    write /sys/class/android_usb/android0/enable 1
